generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRoles {
    ADMIN
    MODERATOR
    CREATOR
    USER
}

enum UserVerificationActionTypes {
    ADD_PASSWORD
    CHANGE_PASSWORD
    DELETE_USER_ACCOUNT
}

enum Providers {
    google
    discord
    github
    gitlab
}

model Account {
    id                     String  @id @default(uuid())
    user_id                String
    provider               String
    provider_account_id    String
    provider_account_email String?
    avatar_image           String?
    refresh_token          String?
    access_token           String?
    token_type             String?
    auth_type              String?
    scope                  String?

    user User? @relation(name: "OAuthAccounts", fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
    id                      String    @id @default(uuid())
    name                    String?   @db.VarChar(48)
    user_name               String?   @unique @default(uuid()) @db.VarChar(48)
    email                   String    @unique @db.VarChar(256)
    password                String?   @db.VarChar(256)
    unverified_new_password String?   @db.VarChar(256)
    role                    UserRoles @default(USER)
    email_verified          DateTime?
    avatar_image            String?
    avatar_image_provider   String?   @db.VarChar(32)

    accounts             Account[]             @relation(name: "OAuthAccounts")
    sessions             Session[]             @relation(name: "UserSessions")
    verification_request VerificationRequest[]

    project_memberships      ProjectMember[]      @relation(name: "Project Member")
    organisation_memberships OrganisationMember[] @relation(name: "Organisation Member")
}

model Session {
    id            String    @id @default(uuid())
    user_id       String
    session_token String    @unique @db.VarChar(48)
    created_on    DateTime?
    last_used     DateTime?
    browser       String?   @db.VarChar(32)
    os            String?   @db.VarChar(32)
    ip_addr       String?   @db.VarChar(48)
    region        String?   @db.VarChar(32)
    country       String?   @db.VarChar(32)
    provider      String?   @db.VarChar(32)

    user User? @relation(name: "UserSessions", fields: [user_id], references: [id], onDelete: Cascade)
}

model DeletedUser {
    id            String   @id @default(uuid())
    user_name     String   @unique @db.VarChar(48)
    email         String   @unique @db.VarChar(256)
    deletion_time DateTime
}

model VerificationRequest {
    id           String                      @id @default(uuid())
    user_id      String                      @unique
    action       UserVerificationActionTypes
    token        String                      @unique @default(uuid()) @db.VarChar(128)
    date_created DateTime                    @default(now())

    user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Project and organisation models
model Organisation {
    id       String               @id @default(uuid())
    members  OrganisationMember[] @relation(name: "Organisation")
    projects Project[]            @relation(name: "Project Organisation")
}

model Project {
    id           String          @id @default(uuid())
    org_id       String?
    members      ProjectMember[] @relation(name: "Project")
    organisation Organisation?   @relation(name: "Project Organisation", fields: [org_id], references: [id])
}

model ProjectMember {
    id         String             @id @default(uuid())
    user_id    String
    project_id String
    role       UserRolesInProject @default(MEMBER)
    user       User               @relation(name: "Project Member", fields: [user_id], references: [id])
    project    Project            @relation(name: "Project", fields: [project_id], references: [id])
}

model OrganisationMember {
    id           String                  @id @default(uuid())
    user_id      String
    org_id       String
    role         UserRolesInOrganisation @default(MEMBER)
    user         User                    @relation(name: "Organisation Member", fields: [user_id], references: [id])
    organisation Organisation            @relation(name: "Organisation", fields: [org_id], references: [id])
}

enum UserRolesInProject {
    MEMBER
    OWNER
}

enum UserRolesInOrganisation {
    OWNER
    MODERATOR
    MEMBER
}
