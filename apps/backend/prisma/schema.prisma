generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRoles {
    ADMIN
    MODERATOR
    CREATOR
    USER
}

enum UserVerificationActionTypes {
    ADD_PASSWORD
    CHANGE_PASSWORD
    DELETE_USER_ACCOUNT
}

enum Providers {
    google
    discord
    github
    gitlab
}

model Account {
    id                     String  @id @default(cuid())
    user_id                String
    provider               String
    provider_account_id    String
    provider_account_email String?
    avatar_image           String?
    refresh_token          String?
    access_token           String?
    token_type             String?
    auth_type              String?
    scope                  String?

    user User? @relation(name: "OAuthAccounts", fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
    id                      String    @id @default(cuid())
    name                    String?   @db.VarChar(48)
    user_name               String?   @unique @default(cuid()) @db.VarChar(48)
    email                   String    @unique @db.VarChar(256)
    password                String?   @db.VarChar(256)
    unverified_new_password String?   @db.VarChar(256)
    role                    UserRoles @default(USER)
    email_verified          DateTime?
    avatar_image            String?
    avatar_image_provider   String?   @db.VarChar(32)

    accounts             Account[]             @relation(name: "OAuthAccounts")
    sessions             Session[]             @relation(name: "UserSessions")
    verification_request VerificationRequest[]

    project_memberships      ProjectMember[]      @relation(name: "Project Member")
    organisation_memberships OrganisationMember[] @relation(name: "Organisation Member")
}

model Session {
    id            String    @id @default(cuid())
    user_id       String
    session_token String    @unique @db.VarChar(48)
    created_on    DateTime?
    last_used     DateTime?
    browser       String?   @db.VarChar(32)
    os            String?   @db.VarChar(32)
    ip_addr       String?   @db.VarChar(48)
    region        String?   @db.VarChar(32)
    country       String?   @db.VarChar(32)
    provider      String?   @db.VarChar(32)

    user User? @relation(name: "UserSessions", fields: [user_id], references: [id], onDelete: Cascade)
}

model DeletedUser {
    id            String   @id @default(cuid())
    user_name     String   @unique @db.VarChar(48)
    email         String   @unique @db.VarChar(256)
    deletion_time DateTime
}

model VerificationRequest {
    id           String                      @id @default(cuid())
    user_id      String
    action       UserVerificationActionTypes
    token        String                      @unique @default(cuid()) @db.VarChar(128)
    date_created DateTime                    @default(now())

    user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// Project and organisation models
model Organisation {
    id         String               @id @default(cuid())
    created_on DateTime             @default(now())
    members    OrganisationMember[] @relation(name: "Organisation")
    projects   Project[]            @relation(name: "Project Organisation")
}

model Project {
    id              String                @id @default(cuid())
    org_id          String?
    name            String
    url_slug        String                @unique
    visibility      ProjectVisibility     @default(PUBLIC)
    icon            String?
    status          ProjectStatus         @default(DRAFT)
    type            ProjectType
    summary         String?               @db.VarChar(324)
    description     String?               @db.VarChar(65256)
    created_on      DateTime              @default(now())
    updated_on      DateTime              @default(now())
    total_downloads Int                   @default(0)
    external_links  ProjectExternalLinks? @relation(name: "project_external_links")
    members         ProjectMember[]       @relation(name: "Project")
    versions        ProjectVersion[]      @relation(name: "project_version")
    organisation    Organisation?         @relation(name: "Project Organisation", fields: [org_id], references: [id])
}

model ProjectVersion {
    id                      String                 @id @default(cuid())
    project_id              String
    publisher_id            String
    version_number          String
    version_title           String
    changelog               String
    url_slug                String
    is_featured             Boolean                @default(false)
    published_on            DateTime               @default(now())
    downloads               Int                    @default(0)
    release_channel         VersionReleaseChannels @default(RELEASE)
    supported_game_versions String[]
    supported_loaders       Loaders[]
    publisher               ProjectMember?         @relation(name: "version_publisher", fields: [publisher_id], references: [id], onDelete: Cascade)
    files                   VersionFile[]          @relation(name: "version_file")
    project                 Project                @relation(name: "project_version", fields: [project_id], references: [id], onDelete: Cascade)
}

model VersionFile {
    id         String         @id @default(cuid())
    file_name  String
    file_size  String
    file_type  String
    file_url   String
    is_primary Boolean        @default(false)
    version_id String
    version    ProjectVersion @relation(name: "version_file", fields: [version_id], references: [id], onDelete: Cascade)
}

model ProjectExternalLinks {
    id                  String  @id @default(cuid())
    project_id          String  @unique
    issue_tracker_link  String?
    project_source_link String?
    project_wiki_link   String?
    discord_invite_link String?
    project             Project @relation(name: "project_external_links", fields: [project_id], references: [id], onDelete: Cascade)
}

model ProjectMember {
    id                 String             @id @default(cuid())
    user_id            String
    project_id         String
    role               UserRolesInProject @default(MEMBER)
    role_title         String?            @default("Member") // A custom title given to that member by the project owner
    user               User               @relation(name: "Project Member", fields: [user_id], references: [id], onDelete: Cascade)
    project            Project            @relation(name: "Project", fields: [project_id], references: [id], onDelete: Cascade)
    published_versions ProjectVersion[]   @relation(name: "version_publisher")
}

model OrganisationMember {
    id           String                  @id @default(cuid())
    user_id      String
    org_id       String
    role         UserRolesInOrganisation @default(MEMBER)
    user         User                    @relation(name: "Organisation Member", fields: [user_id], references: [id], onDelete: Cascade)
    organisation Organisation            @relation(name: "Organisation", fields: [org_id], references: [id], onDelete: Cascade)
}

enum ProjectStatus {
    LISTED
    ARCHIVED
    DRAFT
    UNLISTED
    SCHEDULED
    UNKNOWN
}

enum ProjectType {
    MOD
    MODPACK
    SHADER
    RESOURCE_PACK
    DATA_PACK
    PLUGIN
}

enum UserRolesInProject {
    MEMBER
    OWNER
}

enum UserRolesInOrganisation {
    OWNER
    MODERATOR
    MEMBER
}

enum ProjectVisibility {
    PUBLIC
    PRIVATE
    UNLISTED
}

enum VersionReleaseChannels {
    RELEASE
    BETA
    ALPHA
}

enum Loaders {
    // Modloaders
    FABRIC
    QUILT
    PUZZLE_LOADER

    // ModpackLoaders
    // PluginLoaders
    // ShaderLoaders
    // DataPackLoaders
}
