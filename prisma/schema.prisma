generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRoles {
    ADMIN
    MODERATOR
    CREATOR
    USER
}

enum UserVerificationActionTypes {
    ADD_PASSWORD
    CHANGE_PASSWORD
    DELETE_USER_ACCOUNT
}

enum Providers {
    google
    discord
    github
    gitlab
}

model Account {
    id                   String  @id @default(auto()) @map("_id") @db.ObjectId
    userId               String  @db.ObjectId
    type                 String
    provider             String
    providerAccountId    String
    providerAccountEmail String?
    profileImage         String?
    refresh_token        String? @db.String
    access_token         String? @db.String
    expires_at           Int?
    token_type           String?
    scope                String?
    id_token             String? @db.String
    session_state        String?

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                    String              @id @default(auto()) @map("_id") @db.ObjectId
    name                  String?
    userName              String?             @unique
    email                 String              @unique
    password              String?
    unverifiedNewPassword String?
    role                  UserRoles           @default(USER)
    emailVerified         DateTime?
    image                 String?
    profileImageProvider  Providers?
    accounts              Account[]
    sessions              Session[]
    verificationEmail     VerificationEmail[]
}

model VerificationEmail {
    id          String                      @id @default(auto()) @map("_id") @db.ObjectId
    userId      String                      @db.ObjectId
    action      UserVerificationActionTypes
    token       String                      @unique @default(uuid())
    dateCreated DateTime                    @default(now())

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}
