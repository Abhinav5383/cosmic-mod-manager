import type { Context } from "hono";
import type { AppLoadContext, ServerBuild } from "react-router";
import { createRequestHandler as createRemixRequestHandler } from "react-router";

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action, such as
 * values that are generated by Express middleware like `req.session`.
 */
export type GetLoadContextFunction = (ctx: Context) => Promise<AppLoadContext> | AppLoadContext;

export type RequestHandler = (ctx: Context) => Promise<Response>;

/**
 * Returns a request handler for Express that serves the response using Remix.
 */
export function createRequestHandler({
    build,
    getLoadContext,
    mode = process.env.NODE_ENV,
}: {
    build: ServerBuild | (() => Promise<ServerBuild>);
    getLoadContext?: GetLoadContextFunction;
    mode?: string;
}): RequestHandler {
    const handleRequest = createRemixRequestHandler(build, mode);

    return async (ctx) => {
        try {
            const loadContext = await getLoadContext?.(ctx);
            const response = await handleRequest(ctx.req.raw, loadContext);

            return response;
        } catch (error: unknown) {
            console.error(error);
            return new Response("Internal Server Error", { status: 500 });
        }
    };
}

export function createRemixHeaders(requestHeaders: Context["req"]["raw"]["headers"]): Headers {
    const headers = new Headers();

    for (const [key, values] of Object.entries(requestHeaders)) {
        if (values) {
            if (Array.isArray(values)) {
                for (const value of values) {
                    headers.append(key, value);
                }
            } else if (typeof values === "string") {
                headers.set(key, values);
            }
        }
    }

    return headers;
}
